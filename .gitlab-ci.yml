

# This template will build and test your projects
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# DBnary requires jdk11 for compiling
image: maven:3-openjdk-11

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Verify merge requests using JDK11
verify:jdk11:
  <<: *verify

# package the DBnary app
package:
  stage: build
  tags:
    - dbnary
    - linux
  script:
    - 'mvn $MAVEN_CLI_OPTS package'
  artifacts:
    paths:
      - dbnary-commands/target/distributions/
  rules:
    - if: $CI_COMMIT_TAG

sampling:
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: manual
    - if: $CI_COMMIT_REF_NAME =~ "/feature/"
      when: manual
    - if: $CI_COMMIT_REF_NAME =~ "/release/"
    - if: $CI_COMMIT_REF_NAME =~ "/hotfix/"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    include: .gitlab-ci/sampling.yml

# gitlab does not accept artifacts of size > 10M in releases, and ours are 50M+
# Hence the maven configuration will use the github mirror to perform releases.
deploy:jdk11:
  stage: deploy
  variables:
    JRELEASER_DRAFT: "false"
  script:
    - 'mvn $MAVEN_CLI_OPTS -s ci_settings.xml -Prelease deploy'
  only:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
